Splitter wants T
Split T into H with " -> "
B is nobody
roll H into B
roll H into C
Rock C into R1
Rock B into R2
oh

Finder wants K
X1 is 0
Put R1 at X1 into S
while S ain't misterious and S ain't K
build X1 up
Put R1 at X1 into S
oh
give X1 back

IsNumber wants K
cut K into pieces
X3 = 0
put pieces at X3 into V2
while V2 ain't misterious
if V2 < "0" or V2 > "9" give back false
build X3 up
put pieces at X3 into V2
oh
give back true

Getvalue wants K
if not IsNumber taking K give back 0
cut K into pieces
X3 = 0
TOT=0
put pieces at X3 into V2
while V2 ain't misterious
Cast V2
Let TOT be TOT times 10 with V2 without 48
build X3 up
put pieces at X3 into V2
oh
give back TOT
OH

doAnd takes X and Y
Let Z be 0
dob = 1
let ind be 0
until ind is 16
let x1 be X at ind
let y1 be Y at ind
if x1 and y1 let Z be Z with dob
ind is with 1
DOB is with DOB
oh
give back Z

doOr takes X and Y
Let Z be 0
dob = 1
let ind be 0
until ind is 16
let x1 be X at ind
let y1 be Y at ind
if x1 or y1 let Z be Z with dob
ind is with 1
DOB is with DOB
oh
give back Z

doRshift takes X and Y
Let Z be 0
dob = 1
let ind be Y
until ind is 16
let x1 be X at ind
if x1  let Z be Z with DOB
ind is with 1
DOB is with DOB
oh
give back Z

doLshift takes X and Y
Let Z be 0
let ind be 0
let dob be 1
until ind is 16
if ind >= Y let x1 be X at ind - Y else x1 = false
if x1 let Z be Z with dob
ind is with 1
dob is with dob
oh
give back Z

doNot takes X
Let Z be 0
let ind be 0
let dob be 1
until ind is 16
let x1 be X at ind
if not x1 let Z be with dob
ind is with 1
dob is with dob
oh
give back Z

Operator1 takes X and OP
if OP is "NOT" put doNot taking X into Z 
give back Z

Operator2 takes X and Y and OP
if OP is "OR" put doOr taking X, Y into Z 
if OP is "AND" put doAnd taking X, Y into Z
if OP is "LSHIFT" put doLShift taking X, Y into Z
if OP is "RSHIFT" put doRShift taking X, Y into Z
give back Z

HasValue wants K2
if IsNumber taking K2 give back true
Put Finder taking K2 into Idx2
If R4 at Idx2 give back true
give back false
baby

ResolveValue wants K3
if IsNumber taking K3 give back GetValue taking K3
Put Finder taking K3 into Idx3
If R4 at Idx3 give back R3 at Idx3
give back 0


Resolve1 wants K
Rock work with K
While work ain't nothing
  pop work into k1
  Put Finder taking k1 into Idx1
  If not R4 at Idx1
     Put R2 at Idx1 into Instr1
     cut Instr1 into parts with " "
     if parts at 2 ain't misterious (3 long)
	    put parts at 0 in P1
        put parts at 2 in P2
        put parts at 1 in OP1
		HV1 = HasValue taking P1 
		HV2 = HasValue taking P2
        if HV1 and HV2
			V1 = ResolveValue taking P1
			V2 = ResolveValue taking P2
			put Operator2 taking V1, V2, OP1 into V3
			R4 at Idx1 = true
			R3 at Idx1 = V3	
       else 
           push k1 into work
           if not HV1 push P1 into work 
           if not HV2 push P2 into work
        oh
	 else
        if parts at 1 ain't misterious (2 long)
            put parts at 0 in OP1
			put parts at 1 in P1
			HV1 = HasValue taking P1 
			if HV1
				V1 = ResolveValue taking P1
				V3 = Operator1 taking V1, OP1
				R4 at Idx1 = true
				R3 at Idx1 = V3	
			else 
                push k1 into work
                push P1 into work
            oh    
	 else
	    	put parts at 0 in P1
			HV1 = HasValue taking P1 
			if HV1
				V3 = ResolveValue taking P1
				R4 at Idx1 = true
				R3 at Idx1 = V3	
			else 
               push k1 into work
               push P1 into work
                
oooooh 
Put Finder taking K into Idx2
give back R3 at Idx2
baby

Rock R1
Rock R2
listen to L
until L is silent
Rock R3 with 0
Rock R4 with false
call Splitter with L
listen to L

let answer1 be Resolve1 taking "a" 
shout answer1
shout R1
shout R2
shout R3
shout R4

ctr = 0
while ctr ain't R1
  if R1 at ctr is "b" 
     R3 at ctr = answer1
     R4 at ctr = true
  else
     R3 at ctr = 0
     R4 at ctr = false
  baby  
  ctr is with 1
baby
shout R1
shout R2
shout R3
shout R4

let answer2 be Resolve1 taking "a" 
shout answer2
